function onFormSubmit(e) {
  const props = PropertiesService.getScriptProperties();
  const SID = props.getProperty('TWILIO_SID');
  const TOKEN = props.getProperty('TWILIO_TOKEN');
  const FROM = props.getProperty('TWILIO_FROM'); // e.g. +1855XXXXXXX or 'whatsapp:+14155238886'
  const ADMIN = props.getProperty('ADMIN_NUMBER'); // e.g. +1516XXXXXXX or 'whatsapp:+1XXXXXXXXXX'

  // Pull useful fields from the form submission
  const row = e.values; // [Timestamp, Full Name, Phone, Amount, Type, Ref, Date, ...]
  const fullName = row[1] || '';
  const phone = row[2] || '';
  const amount = row[3] || '';
  const type = row[4] || '';
  const ref = row[5] || '';
  const date = row[6] || '';

  const msgUser = `BSS: Mèsi ${fullName}! Nou resevwa tranzaksyon ${type} la: $${amount}. Ref: ${ref}. Dat: ${date}.`;
  const msgAdmin = `BSS ALERT: ${fullName} (${phone}) ${type} $${amount} | Ref ${ref} | ${date}`;

  sendTwilioMessage(ADMIN, msgAdmin, SID, TOKEN, FROM);
  if (phone) sendTwilioMessage(formatE164(phone), msgUser, SID, TOKEN, FROM); // user receipt
}

function sendTwilioMessage(to, body, sid, token, from) {
  const url = `https://api.twilio.com/2010-04-01/Accounts/${sid}/Messages.json`;
  const payload = { To: to, From: from, Body: body };
  const options = {
    method: 'post',
    payload: payload,
    headers: { Authorization: 'Basic ' + Utilities.base64Encode(sid + ':' + token) },
    muteHttpExceptions: true
  };
  const res = UrlFetchApp.fetch(url, options);
  Logger.log(res.getResponseCode() + ' ' + res.getContentText());
}

function formatE164(haitiOrUsNumber) {
  // normalize numbers like 509-xxx or 1-xxx; adjust to your locales
  const digits = ('' + haitiOrUsNumber).replace(/\D/g, '');
  if (digits.startsWith('1')) return '+' + digits;       // US/CA
  if (digits.length === 10) return '+1' + digits;        // US 10-digit
  if (digits.startsWith('509')) return '+509' + digits.slice(3); // Haiti
  return '+' + digits;
}function onFormSubmit(e) {
  // 1) Pull form values
  const row = e.values; // [Timestamp, Name, Phone, Service, Message, ...]
  const ts = row[0];
  const name = row[1] || "";
  let phone = row[2] || ""; // e.g., 13175381150 (no spaces)
  const service = row[3] || "";
  const note = row[4] || "";

  // Normalize phone (basic)
  phone = phone.replace(/[^\d]/g, "");
  if (!phone.startsWith("1") && phone.length === 10) phone = "1" + phone; // US default; adjust for your country

  // 2) Build WhatsApp message
  const msg =
    `Hi ${name}, thanks for your submission!\n` +
    `Service: ${service}\n` +
    (note ? `Note: ${note}\n` : "") +
    `Received: ${ts}\n` +
    `— MAXIMAX ALWAY MAXIMIZED`;

  // 3) Secrets
  const props = PropertiesService.getScriptProperties();
  const SID = props.getProperty('TWILIO_SID');
  const AUTH = props.getProperty('TWILIO_AUTH');
  const FROM = props.getProperty('TWILIO_FROM'); // e.g., whatsapp:+14155238886 (sandbox) or your prod sender
  const TO = `whatsapp:+${phone}`;

  // 4) Send via Twilio
  const url = `https://api.twilio.com/2010-04-01/Accounts/${SID}/Messages.json`;
  const payload = {
    From: FROM,
    To: TO,
    Body: msg
  };

  const options = {
    method: 'post',
    payload: payload,
    headers: {
      Authorization: 'Basic ' + Utilities.base64Encode(SID + ':' + AUTH)
    },
    muteHttpExceptions: true
  };

  const res = UrlFetchApp.fetch(url, options);
  const code = res.getResponseCode();
  if (code >= 200 && code < 300) {
    Logger.log('WhatsApp sent to ' + TO);
  } else {
    Logger.log('Twilio error ' + code + ': ' + res.getContentText());
  }
}
