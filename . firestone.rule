rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Read a user's role by UID (doc id == auth.uid)
    function myRole() {
      return get(/databases/$(db)/documents/roles/$(request.auth.uid)).data.role;
    }
rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isAdmin() {
      return request.auth != null
        && exists(/databases/$(db)/documents/admins/$(request.auth.uid));
    }

    // Kòmantè vizitè yo
    match /bss_comments/{id} {
      allow read: if true;          // tout moun ka li
      allow create: if true;        // tout moun ka poste
      allow update, delete: if isAdmin(); // SÈLMAN admin yo ka apwouve/efase
    }

    // Lis admin yo (pa ekri soti nan frontend)
    match /admins/{uid} {
      allow read: if isAdmin();  // admin yo ka wè lis la
      allow write: if false;     // pa kite ekriti soti nan kliyan an
    }
  }
}
    function isAdmin() {
      return isSignedIn() && (myRole() == 'admin' || myRole() == 'super');
    }

    function isSuper() {
      return isSignedIn() && myRole() == 'super';
    }

    // ---- Sensitive org data (admins-only) ----
    match /vendors/{id} {
      allow read, write: if isAdmin();
    }

    match /contracts/{id} {
      allow read, write: if isAdmin();
    }

    match /transactions/{id} {
      allow read, write: if isAdmin();
    }

    // ---- Roles table (super-admin control only) ----
    match /roles/{uid} {
      // Any admin can READ (so UI can show who’s an admin);
      // Only SUPER can create/update/delete.
      allow read: if isAdmin();
      allow create, update, delete: if isSuper();
    }

    // Optional: an audit log everyone can read (for transparency),
    // but only admins can write.
    match /audit/{logId} {
      allow read: if isAdmin();
      allow create: if isAdmin();
      allow update, delete: if false;
    }
  }
}
